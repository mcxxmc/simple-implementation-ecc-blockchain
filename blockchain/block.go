package blockchain

import (
	"crypto/sha256"
	"strconv"
)

// Header the header of a block.
type Header struct {
	Version        int      // the id / index of the block
	Timestamp      string   // the time when the block is last created
	PreviousHash   string   // the hash code of the previous block
	MerkleRootHash string   // the hash of the Merkle root, NOT IMPLEMENTED  //todo
	Nonce          [32]byte // the 256-bit "number once"
	TargetHash     string   // the difficulty, NOT IMPLEMENTED
}

// Block a block of the blockchain.
type Block struct {
	PrevBlock 	  *Block  // the previous block
	Header        *Header // the header of the current block
	Content       []byte  // the data (in bytes)
}

// Hash returns a 256-bit SHA hash of the block.
//
// The block hash is generated by taking the hash of the block contents,
// adding a random string of numbers (the 128-bit nonce), and hashing the block again.
func Hash(b *Block) string {
	tmp := sha256.Sum256(append([]byte(strconv.Itoa(b.Header.Version) + b.Header.Timestamp + b.Header.PreviousHash),
		b.Content...))
	tmp = sha256.Sum256(append(tmp[:], b.Header.Nonce[:]...))
	return string(tmp[:])
}
